{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from \"axios\";\nimport './draw.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw() {\n  _s();\n\n  useEffect(() => {\n    if (performance.navigation.type === 1) {\n      // DROP columns in drawings table.\n      Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n      ).then(res => {\n        console.log('paths deleted');\n      });\n    }\n  });\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawList, setDrawList] = useState([]);\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = async () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    console.log(drawList);\n    Axios.post(\"http://localhost:8000/draw\", {\n      drawings: drawList\n    }).then(res => {// window.alert(\"Welcome \"+username)\n    });\n  };\n\n  const saveToDB = async () => {\n    await finishDrawing();\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    drawList.push([offsetX, offsetY]);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  }; // const finishedDraw = () =>{\n  //     finishDrawing()\n  //     saveToDB()\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"draw\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"9+Q/phaRUuRxcgkA3YZMv/NLGPo=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Axios","Draw","performance","navigation","type","post","then","res","console","log","canvasRef","contextRef","isDrawing","setIsDrawing","drawList","setDrawList","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","drawings","saveToDB","draw","push","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nexport default function Draw(){\n    useEffect(() =>{\n        if(performance.navigation.type === 1){\n            // DROP columns in drawings table.\n            Axios.post('http://localhost:8000/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n        }\n    })\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n\n    useEffect(() =>{\n    const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n    },[])\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n\n    }\n     const finishDrawing = async () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        console.log(drawList)\n\n         Axios.post(\"http://localhost:8000/draw\",{\n             drawings: drawList,\n         }).then((res) => {\n             // window.alert(\"Welcome \"+username)\n         });\n    }\n    const saveToDB = async () => {\n        await finishDrawing();\n\n    }\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n    // const finishedDraw = () =>{\n    //     finishDrawing()\n    //     saveToDB()\n    // }\n    return(\n        <div className={\"draw\"}>\n            <p>Hello!</p>\n        <canvas className={\"canvas\"}\n        onMouseDown={startDrawing}\n        onMouseUp={finishDrawing}\n        onMouseMove={draw}\n        ref={canvasRef}/>\n            <p/>\n            <button type={\"text\"} >Send</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}