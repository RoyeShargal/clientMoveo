{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { goToGuess } from '../draw/Draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess() {\n  _s();\n\n  let drawings = [];\n  const [message, setMessage] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  useEffect(() => {\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    }); // const canvas = canvasRef.current;\n    // canvas.width  = 800;\n    // canvas.height = 600;\n    // canvas.style.width  = '400px';\n    // canvas.style.height = '300px';\n    // const context = canvas.getContext(\"2d\")\n    // context.scale(2,2);\n    // context.lineCap = \"round\"\n    // context.strokeStyle=\"black\"\n    // context.lineWidth = 5;\n    // contextRef.current = context;\n    //\n    // Axios.get(\"http://localhost:8000/getword\").then(res =>{\n    //     setCorrectWord(Object.values(res.data[0])[1])\n    // })\n    // draw()\n  }, []); //create api call to get correctWord chosen by user drawing\n\n  const guess = () => {\n    if (correctWord === guessedWord) {\n      console.log('clearing draw');\n      window.alert('Well done!'); // DROP columns in drawings table.\n\n      Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n      ).then(res => {\n        console.log('paths deleted');\n      });\n      window.location.href = '/draw';\n    } else {\n      console.log('mistake');\n      setMessage('Oops, try again!');\n    }\n  }; // const getDrawings = () =>{\n  //     Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n  //         const pathLength = (x.data).length\n  //         // console.log(x.data)\n  //         for(let iterator=0; iterator<pathLength; iterator++){\n  //             drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n  //         }\n  //     })\n  //\n  // }\n  // const canvasRef = useRef(null)\n  // const contextRef = useRef(null)\n  // const draw = () => {\n  //     getDrawings();\n  //     var i = 0\n  //     var currentpath = 0\n  //     wait(1000).then(r => {\n  //             console.log(drawings.length)\n  //             contextRef.current.beginPath();\n  //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n  //             while(i < drawings.length) {\n  //\n  //                 while(currentpath === drawings[i][0]){\n  //                     console.log(drawings[i][0])\n  //                     contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n  //                     contextRef.current.stroke();\n  //                 i++\n  //             }\n  //             contextRef.current.closePath()\n  //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n  //             contextRef.current.beginPath();\n  //             currentpath++;\n  //             }\n  //     })\n  //     setIsDrawUp(true)\n  //\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guess\",\n    children: [\"Guess the word\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter your guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"guessedWord\",\n      type: \"text\",\n      required: true,\n      minLength: 1,\n      maxLength: 20,\n      onChange: e => {\n        setGuessedWord(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sub\",\n      onClick: guess,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this), message.toString() !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 40\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 59\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"a36vAMRJEcbtLFNOXO538DvUvN4=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","goToGuess","Guess","drawings","message","setMessage","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawUp","setIsDrawUp","post","then","res","console","log","guess","window","alert","location","href","canvasRef","e","target","value","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\nimport {goToGuess} from '../draw/Draw'\nexport default function Guess(){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    useEffect(()=>{\n        Axios.post('http://localhost:8000/deletepaths',\n            {} // don't need to send data\n        ).then((res) =>{\n            console.log('paths deleted')\n        })\n        // const canvas = canvasRef.current;\n        // canvas.width  = 800;\n        // canvas.height = 600;\n        // canvas.style.width  = '400px';\n        // canvas.style.height = '300px';\n        // const context = canvas.getContext(\"2d\")\n        // context.scale(2,2);\n        // context.lineCap = \"round\"\n        // context.strokeStyle=\"black\"\n        // context.lineWidth = 5;\n        // contextRef.current = context;\n        //\n        // Axios.get(\"http://localhost:8000/getword\").then(res =>{\n        //     setCorrectWord(Object.values(res.data[0])[1])\n        // })\n        // draw()\n\n    },[])\n    //create api call to get correctWord chosen by user drawing\n    const guess = () =>{\n        if(correctWord === guessedWord){\n            console.log('clearing draw')\n            window.alert('Well done!')\n            // DROP columns in drawings table.\n            Axios.post('http://localhost:8000/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n             window.location.href = '/draw'\n        }\n        else{\n            console.log('mistake')\n            setMessage('Oops, try again!')\n        }\n    }\n    // const getDrawings = () =>{\n    //     Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n    //         const pathLength = (x.data).length\n    //         // console.log(x.data)\n    //         for(let iterator=0; iterator<pathLength; iterator++){\n    //             drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n    //         }\n    //     })\n    //\n    // }\n    // const canvasRef = useRef(null)\n    // const contextRef = useRef(null)\n\n\n    // const draw = () => {\n    //     getDrawings();\n    //     var i = 0\n    //     var currentpath = 0\n    //     wait(1000).then(r => {\n    //             console.log(drawings.length)\n    //             contextRef.current.beginPath();\n    //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n    //             while(i < drawings.length) {\n    //\n    //                 while(currentpath === drawings[i][0]){\n    //                     console.log(drawings[i][0])\n    //                     contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n    //                     contextRef.current.stroke();\n    //                 i++\n    //             }\n    //             contextRef.current.closePath()\n    //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n    //             contextRef.current.beginPath();\n    //             currentpath++;\n    //             }\n    //     })\n    //     setIsDrawUp(true)\n    //\n    // }\n\n    return(\n        <div className={\"guess\"}>\n            Guess the word\n        <p/>\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <p/>\n            <p/>\n            {/*<form onSubmit={guess}>*/}\n                <label>Enter your guess</label>\n                <p></p>\n                <input className=\"guessedWord\" type={\"text\"}\n                       required\n                       minLength={1}\n                       maxLength={20}\n                       onChange={(e) => {\n                           setGuessedWord(e.target.value);\n                       }}\n                />\n                <p/>\n                <button className=\"sub\" onClick={guess}>Submit</button>\n            {/*</form>*/}\n            {message.toString()!=='' ? <p>{message}</p> : <p/>}\n            {/*create hints as a feature i.e. number of letters,...*/}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}