{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw() {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.height = `${window.innerHeight}`;\n    canvas.style.width = `${window.innerWidth}`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"DRAW\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"IEWAHgvs7vostxxBAJwHSdOlbOE=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Draw","canvasRef","contextRef","isDrawing","setIsDrawing","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;;AAGA,eAAe,SAASC,IAAT,GAAe;AAAA;;AAC1B,QAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMI,UAAU,GAAGJ,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAACK,SAAD,EAAWC,YAAX,IAA2BL,QAAQ,CAAC,KAAD,CAAzC;AAEAF,EAAAA,SAAS,CAAC,MAAK;AACf,UAAMQ,MAAM,GAAGJ,SAAS,CAACK,OAAzB;AACID,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAP,GAAkB,CAAjC;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAgBF,MAAM,CAACG,WAAP,GAAmB,CAAnC;AACAN,IAAAA,MAAM,CAACO,KAAP,CAAaF,MAAb,GAAuB,GAAEF,MAAM,CAACG,WAAY,EAA5C;AACAN,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAb,GAAsB,GAAEC,MAAM,CAACC,UAAW,EAA1C;AAEA,UAAMI,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAgB,CAAhB;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,IAAAA,OAAO,CAACI,WAAR,GAAoB,OAApB;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAhB,IAAAA,UAAU,CAACI,OAAX,GAAqBO,OAArB;AAEH,GAdQ,EAcP,EAdO,CAAT;;AAeA,QAAMM,YAAY,GAAG,QAAmB;AAAA,QAAlB;AAACC,MAAAA;AAAD,KAAkB;AACpC,UAAK;AAACC,MAAAA,OAAD;AAASC,MAAAA;AAAT,QAAoBF,WAAzB;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBiB,SAAnB;AACArB,IAAAA,UAAU,CAACI,OAAX,CAAmBkB,MAAnB,CAA0BH,OAA1B,EAAkCC,OAAlC;AACAlB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEH,GAND;;AAOA,QAAMqB,aAAa,GAAG,MAAM;AACxBvB,IAAAA,UAAU,CAACI,OAAX,CAAmBoB,SAAnB;AACAtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,QAAMuB,IAAI,GAAG,SAAmB;AAAA,QAAlB;AAACP,MAAAA;AAAD,KAAkB;;AAC5B,QAAG,CAACjB,SAAJ,EAAc;AACV;AACH;;AACD,UAAM;AAACkB,MAAAA,OAAD;AAASC,MAAAA;AAAT,QAAoBF,WAA1B;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBsB,MAAnB,CAA0BP,OAA1B,EAAkCC,OAAlC;AACApB,IAAAA,UAAU,CAACI,OAAX,CAAmBuB,MAAnB;AAEH,GARD;;AASA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA7CuB7B,I;;KAAAA,I","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\n\n\nexport default function Draw(){\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [isDrawing,setIsDrawing] = useState(false)\n\n    useEffect(() =>{\n    const canvas = canvasRef.current;\n        canvas.width = window.innerWidth*2;\n        canvas.height = window.innerHeight*2;\n        canvas.style.height = `${window.innerHeight}`;\n        canvas.style.width = `${window.innerWidth}`;\n\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n    },[])\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n\n    }\n    const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n    }\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent\n        contextRef.current.lineTo(offsetX,offsetY)\n        contextRef.current.stroke()\n\n    }\n    return(\n        <div>\n            DRAW\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}