{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess(props) {\n  _s();\n\n  let drawings = [];\n  const [message, setMessage] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  const [points, setPoints] = useState(0);\n  Axios.defaults.withCredentials = true;\n  const [currPoints, setCurrPoints] = useState(0);\n  useEffect(() => {\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    });\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    const interval = setInterval(() => {\n      if (!isDrawUp) draw();\n      Axios.get(\"http://localhost:8000/getword\").then(res => {\n        setCorrectWord(Object.values(res.data[0])[1]);\n        setPoints(Object.values(res.data[0])[2]); // console.log(Object.values(res.data[0])[1])\n      });\n    }, 1000);\n  }, []);\n\n  const getPoints = () => {\n    Axios.get(\"http://localhost:8000/getpoints\").then(response => {\n      console.log('hello' + response.data.points); // setCurrPoints(response.data.points)\n    });\n  }; //create api call to get correctWord chosen by user drawing\n\n\n  const guess = () => {\n    if (correctWord === guessedWord) {\n      console.log(points);\n      Axios.post('http://localhost:8000/setpoints', {\n        points: points\n      }).then(() => {\n        console.log('reached guess to change points');\n      }); // Axios.post(\"http://localhost:8000/setpoints\", {points:points}).then(()=>{\n      //     console.log('points updated')\n      // })\n\n      Axios.post(\"http://localhost:8000/endgame\", {\n        done: 1,\n        points: points\n      }).then(() => {\n        console.log('clearing draw');\n        window.alert('Well done!');\n        window.location.href = '/choose'; // DROP columns in drawings table.\n\n        Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n        ).then(res => {\n          console.log('paths deleted');\n        });\n      });\n    } else {\n      console.log('False! the correct word is: ' + correctWord + ' with ' + points + ' points');\n      setMessage('Oops, try again!');\n    }\n  };\n\n  const getDrawings = () => {\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      const pathLength = x.data.length;\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2], Object.values(x.data[iterator])[3]];\n      }\n    });\n  };\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const draw = () => {\n    getDrawings();\n    var i = 0;\n    var currentpath = 0;\n    wait(1000).then(r => {\n      // console.log(drawings.length)\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n\n      while (i < drawings.length) {\n        while (currentpath === drawings[i][0]) {\n          //console.log(drawings[i][0])\n          contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n          contextRef.current.stroke();\n          i++;\n        }\n\n        contextRef.current.closePath();\n        contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n        contextRef.current.beginPath();\n        currentpath++;\n      }\n    });\n    setIsDrawUp(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guess\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The word worth \", points, \" Points!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter your guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"guessedWord\",\n      type: \"text\",\n      required: true,\n      minLength: 1,\n      maxLength: 20,\n      onChange: e => {\n        setGuessedWord(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sub\",\n      onClick: guess,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), message.toString() !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 40\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getPoints,\n      children: \"getPoints\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"M7mJsmkeysvQ01m2/NCGfHe1bF0=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","Guess","props","drawings","message","setMessage","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawUp","setIsDrawUp","points","setPoints","defaults","withCredentials","currPoints","setCurrPoints","post","then","res","console","log","canvas","canvasRef","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","contextRef","interval","setInterval","draw","get","Object","values","data","getPoints","response","guess","done","window","alert","location","href","getDrawings","x","pathLength","length","iterator","i","currentpath","r","beginPath","moveTo","lineTo","stroke","closePath","e","target","value","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\n\n\nexport default function Guess(props){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    const [points,setPoints] = useState(0);\n    Axios.defaults.withCredentials = true;\n    const [currPoints,setCurrPoints] = useState(0)\n    useEffect(()=>{\n\n\n        Axios.post('http://localhost:8000/deletepaths',\n            {} // don't need to send data\n        ).then((res) =>{\n            console.log('paths deleted')\n        })\n        const canvas = canvasRef.current;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n\n        const interval = setInterval(() => {\n            if(!isDrawUp) draw()\n            Axios.get(\"http://localhost:8000/getword\").then(res => {\n                setCorrectWord(Object.values(res.data[0])[1])\n                setPoints(Object.values(res.data[0])[2])\n                // console.log(Object.values(res.data[0])[1])\n            })\n        }, 1000)\n\n    },[])\n    const getPoints = () =>{\n        Axios.get(\"http://localhost:8000/getpoints\").then((response)=>{\n                console.log('hello' + response.data.points)\n                // setCurrPoints(response.data.points)\n            }\n        )\n    }\n\n    //create api call to get correctWord chosen by user drawing\n    const guess = () =>{\n            if(correctWord === guessedWord){\n                console.log(points)\n                Axios.post('http://localhost:8000/setpoints', {points:points}).then(()=>{\n                    console.log('reached guess to change points')\n                })\n                // Axios.post(\"http://localhost:8000/setpoints\", {points:points}).then(()=>{\n                //     console.log('points updated')\n                // })\n                Axios.post(\"http://localhost:8000/endgame\",\n                    {done:1, points:points}).then(()=>{\n                    console.log('clearing draw')\n                    window.alert('Well done!')\n                    window.location.href = '/choose'\n                    // DROP columns in drawings table.\n                    Axios.post('http://localhost:8000/deletepaths',\n                        {} // don't need to send data\n                    ).then((res) =>{\n                        console.log('paths deleted')\n                    })\n                })\n            }\n            else{\n                console.log('False! the correct word is: '+correctWord+' with '+ points+' points')\n                setMessage('Oops, try again!')\n            }\n    }\n    const getDrawings = () =>{\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n\n    const draw = () => {\n        getDrawings();\n        var i = 0\n        var currentpath = 0\n        wait(1000).then(r => {\n                // console.log(drawings.length)\n                contextRef.current.beginPath();\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                while(i < drawings.length) {\n\n                    while(currentpath === drawings[i][0]){\n                        //console.log(drawings[i][0])\n                        contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                        contextRef.current.stroke();\n                    i++\n                }\n                contextRef.current.closePath()\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                contextRef.current.beginPath();\n                currentpath++;\n                }\n        })\n        setIsDrawUp(true)\n    }\n\n    return(\n        <div className={\"guess\"}>\n\n        <p/>\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <p/>\n            <p>The word worth {points} Points!</p>\n                <label>Enter your guess</label>\n                <p></p>\n                <input className=\"guessedWord\" type={\"text\"}\n                       required\n                       minLength={1}\n                       maxLength={20}\n                       onChange={(e) => {\n                           setGuessedWord(e.target.value);\n                       }}\n                />\n                <p/>\n                <button className=\"sub\" onClick={guess}>Submit</button>\n            {/*</form>*/}\n            {message.toString()!=='' ? <p>{message}</p> : <p/>}\n            {/*create hints as a feature i.e. number of letters,...*/}\n            <button onClick={getPoints}>getPoints</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}