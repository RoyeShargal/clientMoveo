{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { goToGuess } from '../draw/Draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess(props) {\n  _s();\n\n  let drawings = [];\n  const [message, setMessage] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  useEffect(() => {\n    // Axios.post('http://localhost:8000/deletepaths',\n    //     {} // don't need to send data\n    // ).then((res) =>{\n    //     console.log('paths deleted')\n    // })\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    Axios.get(\"http://localhost:8000/getword\").then(res => {\n      setCorrectWord(Object.values(res.data[0])[1]);\n    });\n    draw();\n  }, []); //create api call to get correctWord chosen by user drawing\n\n  const guess = () => {\n    if (correctWord === guessedWord) {\n      console.log('clearing draw');\n      window.alert('Well done!'); // DROP columns in drawings table.\n\n      Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n      ).then(res => {\n        console.log('paths deleted');\n      });\n      window.location.href = '/draw';\n    } else {\n      console.log('mistake');\n      setMessage('Oops, try again!');\n    }\n  };\n\n  const getDrawings = () => {\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      const pathLength = x.data.length;\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2], Object.values(x.data[iterator])[3]];\n      }\n    });\n  };\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const draw = () => {\n    getDrawings();\n    var i = 0;\n    var currentpath = 0;\n    wait(1000).then(r => {\n      console.log(drawings.length);\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n\n      while (i < drawings.length) {\n        while (currentpath === drawings[i][0]) {\n          console.log(drawings[i][0]);\n          contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n          contextRef.current.stroke();\n          i++;\n        }\n\n        contextRef.current.closePath();\n        contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n        contextRef.current.beginPath();\n        currentpath++;\n      }\n    });\n    setIsDrawUp(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"guess\",\n    children: [\"Guess the word\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Enter your guess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"guessedWord\",\n      type: \"text\",\n      required: true,\n      minLength: 1,\n      maxLength: 20,\n      onChange: e => {\n        setGuessedWord(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sub\",\n      onClick: guess,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this), message.toString() !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 40\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.guess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"PCpPpQjZoVJP1HeOixHlC+cL2sc=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","goToGuess","Guess","props","drawings","message","setMessage","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawUp","setIsDrawUp","canvas","canvasRef","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","contextRef","get","then","res","Object","values","data","draw","guess","console","log","window","alert","post","location","href","getDrawings","x","pathLength","length","iterator","i","currentpath","r","beginPath","moveTo","lineTo","stroke","closePath","e","target","value","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\nimport {goToGuess} from '../draw/Draw'\nexport default function Guess(props){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    useEffect(()=>{\n        // Axios.post('http://localhost:8000/deletepaths',\n        //     {} // don't need to send data\n        // ).then((res) =>{\n        //     console.log('paths deleted')\n        // })\n\n\n        const canvas = canvasRef.current;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n        Axios.get(\"http://localhost:8000/getword\").then(res =>{\n            setCorrectWord(Object.values(res.data[0])[1])\n        })\n        draw()\n\n    },[])\n    //create api call to get correctWord chosen by user drawing\n    const guess = () =>{\n        if(correctWord === guessedWord){\n            console.log('clearing draw')\n            window.alert('Well done!')\n            // DROP columns in drawings table.\n            Axios.post('http://localhost:8000/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n             window.location.href = '/draw'\n        }\n        else{\n            console.log('mistake')\n            setMessage('Oops, try again!')\n        }\n    }\n    const getDrawings = () =>{\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n\n    const draw = () => {\n        getDrawings();\n        var i = 0\n        var currentpath = 0\n        wait(1000).then(r => {\n                console.log(drawings.length)\n                contextRef.current.beginPath();\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                while(i < drawings.length) {\n\n                    while(currentpath === drawings[i][0]){\n                        console.log(drawings[i][0])\n                        contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                        contextRef.current.stroke();\n                    i++\n                }\n                contextRef.current.closePath()\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                contextRef.current.beginPath();\n                currentpath++;\n                }\n        })\n        setIsDrawUp(true)\n\n    }\n\n    return(\n        <div className={\"guess\"}>\n            Guess the word\n        <p/>\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <p/>\n            <p/>\n                <label>Enter your guess</label>\n                <p></p>\n                <input className=\"guessedWord\" type={\"text\"}\n                       required\n                       minLength={1}\n                       maxLength={20}\n                       onChange={(e) => {\n                           setGuessedWord(e.target.value);\n                       }}\n                />\n                <p/>\n                <button className=\"sub\" onClick={guess}>Submit</button>\n            {/*</form>*/}\n            {message.toString()!=='' ? <p>{message}</p> : <p/>}\n            {/*create hints as a feature i.e. number of letters,...*/}\n            <p>{props.guess}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}