{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess() {\n  _s();\n\n  let drawings = [];\n\n  const getDrawings = () => {\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      console.log(x.data);\n      const pathLength = x.data.length;\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings.push(Object.values(x.data[iterator])[0], Object.values(x.data[iterator])[1]);\n      }\n    });\n  };\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    console.log(drawList);\n  };\n\n  const draw = () => {\n    for (let i = 0; i < drawings.length; i++) {\n      contextRef.current.lineTo(drawings[i][0], drawings[i][1]);\n      contextRef.current.stroke();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"GUESS\", /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: getDrawings,\n      children: \" GET DRAWINGS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: draw,\n      children: \" GET DRAWINGS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"4166hQdVhpFUUkALQs7rNszyGsI=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","Guess","drawings","getDrawings","get","then","x","console","log","data","pathLength","length","iterator","push","Object","values","canvasRef","contextRef","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","setIsDrawing","finishDrawing","closePath","drawList","draw","i","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nexport default function Guess(){\n    let drawings = []\n    const getDrawings = () =>{\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            console.log((x.data))\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings.push(Object.values(x.data[iterator])[0],Object.values(x.data[iterator])[1])\n            }\n        })\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n    useEffect(() =>{\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n    },[])\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n\n    }\n    const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        console.log(drawList)\n\n    }\n    const draw = () => {\n        for(let i=0;i<drawings.length;i++){\n            contextRef.current.lineTo(drawings[i][0],drawings[i][1]);\n            contextRef.current.stroke();\n        }\n\n    }\n\n    return(\n        <div>\n            GUESS\n            <button type=\"text\" onClick={getDrawings}> GET DRAWINGS</button>\n            <button type=\"text\" onClick={draw}> GET DRAWINGS</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}