{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from \"axios\";\nimport './draw.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw() {\n  _s();\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawList, setDrawList] = useState([]);\n  const [paths, setPaths] = useState(0);\n  const [choosedWord, setChoosenWord] = useState('');\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    Axios.get(\"http://localhost:8000/draw\").then(res => {\n      const word = Object.values(res.data[1]);\n      setChoosenWord(word.toString());\n      console.log(word);\n    });\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPaths(paths + 1);\n    console.log(paths);\n    console.log(drawList);\n  };\n\n  const send = () => {\n    console.log('sending draw');\n    Axios.post(\"http://localhost:8000/draw\", {\n      drawings: drawList,\n      paths: paths\n    }).then(res => {});\n  };\n\n  const clear = () => {\n    console.log('clearing draw'); // DROP columns in drawings table.\n\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    });\n    window.location.reload();\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    drawList.push([paths, offsetX, offsetY]);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"draw\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"draw\",\n      children: [\"Draw a \", choosedWord, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: send,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: clear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"CFObLCTYCsW4psVfSVY2JHF9Nr0=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Axios","Draw","canvasRef","contextRef","isDrawing","setIsDrawing","drawList","setDrawList","paths","setPaths","choosedWord","setChoosenWord","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","get","then","res","word","Object","values","data","toString","console","log","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","send","post","drawings","clear","window","location","reload","draw","push","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nexport default function Draw(){\n\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n    const[paths,setPaths] = useState(0)\n    const [choosedWord,setChoosenWord] = useState('')\n\n    useEffect(() =>{\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n\n        Axios.get(\"http://localhost:8000/draw\").then(res =>{\n            const word = Object.values(res.data[1])\n            setChoosenWord(word.toString())\n            console.log(word)\n        })\n        \n    },[])\n\n\n\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n    }\n\n     const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        setPaths(paths+1)\n        console.log(paths)\n        console.log(drawList)\n\n    }\n\n    const send = () =>{\n        console.log('sending draw')\n        Axios.post(\"http://localhost:8000/draw\",{\n            drawings: drawList,\n            paths: paths\n        }).then((res) => {\n        });\n    }\n    const clear = () =>{\n        console.log('clearing draw')\n                // DROP columns in drawings table.\n                Axios.post('http://localhost:8000/deletepaths',\n                    {} // don't need to send data\n                ).then((res) =>{\n                    console.log('paths deleted')\n                })\n        window.location.reload();\n\n\n    }\n\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([paths,offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n\n    return(\n        <div className={\"draw\"}>\n            <p className={\"draw\"}>Draw a {choosedWord}!</p>\n            <canvas className={\"canvas\"}\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}/>\n            <p/>\n            <button type=\"text\" onClick={send}>Send</button>\n            <button type=\"text\" onClick={clear}>Clear</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}