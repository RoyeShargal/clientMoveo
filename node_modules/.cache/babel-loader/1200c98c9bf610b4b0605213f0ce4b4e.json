{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from \"axios\";\nimport './draw.css';\nimport { render } from \"react-dom\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport Guess from '../guess/Guess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw(props) {\n  _s();\n\n  let drawings = [];\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  const [message, setMessage] = useState('');\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [sent, setSent] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawList, setDrawList] = useState([]);\n  const [paths, setPaths] = useState(0);\n  const [choosedWord, setChoosenWord] = useState('');\n  const [prefix, setPrefix] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    Axios.get(\"http://localhost:8000/getword\").then(res => {\n      setChoosenWord(Object.values(res.data[0])[1]);\n    });\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPaths(paths + 1);\n    console.log(paths);\n    console.log(drawList);\n  };\n\n  const send = () => {\n    setSent(true);\n    console.log('sending draw');\n    Axios.post(\"http://localhost:8000/draw\", {\n      drawings: drawList,\n      paths: paths\n    }).then(res => {});\n  };\n\n  const clear = () => {\n    console.log('clearing draw'); // DROP columns in drawings table.\n\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    });\n    window.location.reload();\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    drawList.push([paths, offsetX, offsetY]);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"draw\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"draw\",\n      children: [\"Draw \", prefix, \" \", choosedWord, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"text\",\n        onClick: send,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"text\",\n        onClick: clear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"TulT1YqdsBNLCdvbqCX585tN1QY=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Axios","render","wait","Guess","Draw","props","drawings","isDrawUp","setIsDrawUp","message","setMessage","canvasRef","contextRef","sent","setSent","isDrawing","setIsDrawing","drawList","setDrawList","paths","setPaths","choosedWord","setChoosenWord","prefix","setPrefix","correctWord","setCorrectWord","guessedWord","setGuessedWord","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","get","then","res","Object","values","data","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","console","log","send","post","clear","window","location","reload","draw","push","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nimport {render} from \"react-dom\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\n\nimport Guess from '../guess/Guess'\nexport default function Draw(props){\n    let drawings = []\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    const [message, setMessage] = useState('')\n\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [sent,setSent] = useState(false)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n    const[paths,setPaths] = useState(0)\n    const [choosedWord,setChoosenWord] = useState('')\n    const [prefix,setPrefix] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n\n    useEffect(() =>{\n\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n        Axios.get(\"http://localhost:8000/getword\").then(res =>{\n            setChoosenWord(Object.values(res.data[0])[1])\n        })\n\n    },[])\n\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n    }\n\n     const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        setPaths(paths+1)\n        console.log(paths)\n        console.log(drawList)\n\n    }\n\n    const send = () =>{\n        setSent(true)\n        console.log('sending draw')\n        Axios.post(\"http://localhost:8000/draw\",{\n            drawings: drawList,\n            paths: paths\n        }).then((res) => {\n        });\n\n    }\n\n    const clear = () =>{\n        console.log('clearing draw')\n                // DROP columns in drawings table.\n                Axios.post('http://localhost:8000/deletepaths',\n                    {} // don't need to send data\n                ).then((res) =>{\n                    console.log('paths deleted')\n                })\n        window.location.reload();\n\n\n    }\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([paths,offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n\n    return(\n        <div className={\"draw\"}>\n            <p className={\"draw\"}>Draw {prefix} {choosedWord}!</p>\n            <canvas className={\"canvas\"}\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}/>\n            <p/>\n                <div>\n                <button type=\"text\" onClick={send}>Send</button>\n                <button type=\"text\" onClick={clear}>Clear</button>\n                </div>\n\n            {/*{!isUserDraw ?*/}\n            {/*    <div className={\"guess\"}>*/}\n            {/*        Guess the word*/}\n            {/*        <p/>*/}\n            {/*        /!*<canvas className={\"canvas\"}*!/*/}\n            {/*        /!*        ref={canvasRef}/>*!/*/}\n            {/*        /!*<p/>*!/*/}\n            {/*        <p/>*/}\n            {/*        /!*<form onSubmit={guess}>*!/*/}\n            {/*        <label>Enter your guess</label>*/}\n            {/*        <p></p>*/}\n            {/*        <input className=\"guessedWord\" type={\"text\"}*/}\n            {/*               required*/}\n            {/*               minLength={1}*/}\n            {/*               maxLength={20}*/}\n            {/*               onChange={(e) => {*/}\n            {/*                   setGuessedWord(e.target.value);*/}\n            {/*               }}*/}\n            {/*        />*/}\n            {/*        <p/>*/}\n            {/*        <button className=\"sub\" onClick={guess}>Submit</button>*/}\n            {/*        /!*</form>*!/*/}\n            {/*        {message.toString()!=='' ? <p>{message}</p> : <p/>}*/}\n            {/*        /!*create hints as a feature i.e. number of letters,...*!/*/}\n            {/*    </div>*/}\n            {/*    : <p/>}*/}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}