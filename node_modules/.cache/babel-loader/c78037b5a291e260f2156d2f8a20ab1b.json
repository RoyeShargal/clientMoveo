{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from \"axios\";\nimport './draw.css';\nimport { render } from \"react-dom\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport Guess from '../guess/Guess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw(props) {\n  _s();\n\n  let drawings = [];\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isUserDraw, setIsUserDraw] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [sent, setSent] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawList, setDrawList] = useState([]);\n  const [paths, setPaths] = useState(0);\n  const [choosedWord, setChoosenWord] = useState('');\n  const [prefix, setPrefix] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  useEffect(() => {\n    setIsUserDraw(props.isDrawer);\n    const urlpath = window.location.href.split(\"/\"); // console.log(urlpath[urlpath.length-1])\n\n    if (urlpath[urlpath.length - 1] === 'drawt') setIsUserDraw(true);else setIsUserDraw(false);\n    console.log(urlpath[urlpath.length - 1] === 'drawt');\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    Axios.get(\"http://localhost:8000/getword\").then(res => {\n      setChoosenWord(Object.values(res.data[0])[1]);\n    });\n\n    if (!isUserDraw) {\n      Axios.get(\"http://localhost:8000/getword\").then(res => {\n        setCorrectWord(Object.values(res.data[0])[1]);\n      });\n      drawPaintFromUser();\n    }\n  }, []);\n\n  const getDrawings = () => {\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      const pathLength = x.data.length; // console.log(x.data)\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2], Object.values(x.data[iterator])[3]];\n      }\n    });\n  };\n\n  const drawPaintFromUser = () => {\n    getDrawings();\n    var i = 0;\n    var currentpath = 0;\n    wait(1000).then(r => {\n      console.log(drawings.length);\n      contextRef.current.beginPath();\n      contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n\n      while (i < drawings.length) {\n        while (currentpath === drawings[i][0]) {\n          console.log(drawings[i][0]);\n          contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n          contextRef.current.stroke();\n          i++;\n        }\n\n        contextRef.current.closePath();\n        contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n        contextRef.current.beginPath();\n        currentpath++;\n      }\n    });\n    setIsDrawUp(true);\n  };\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPaths(paths + 1);\n    console.log(paths);\n    console.log(drawList);\n  };\n\n  const send = () => {\n    setSent(true);\n    console.log('sending draw');\n    Axios.post(\"http://localhost:8000/draw\", {\n      drawings: drawList,\n      paths: paths\n    }).then(res => {});\n    setIsDrawUp(true);\n  };\n\n  const success = () => {};\n\n  const clear = () => {\n    console.log('clearing draw'); // DROP columns in drawings table.\n\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    });\n    window.location.reload();\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    drawList.push([paths, offsetX, offsetY]);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const guess = () => {\n    if (correctWord === guessedWord) {\n      console.log('clearing draw');\n      window.alert('Well done!'); // DROP columns in drawings table.\n\n      Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n      ).then(res => {\n        console.log('paths deleted');\n      });\n      window.location.href = '/drawf';\n    } else {\n      console.log('mistake');\n      setMessage('Oops, try again!');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"draw\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"draw\",\n      children: [\"Draw \", prefix, \" \", choosedWord, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), isUserDraw ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"text\",\n        onClick: send,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"text\",\n        onClick: clear,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 23\n    }, this), !isUserDraw ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess\",\n      children: [\"Guess the word\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"guessedWord\",\n        type: \"text\",\n        required: true,\n        minLength: 1,\n        maxLength: 20,\n        onChange: e => {\n          setGuessedWord(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sub\",\n        onClick: guess,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this), message.toString() !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 48\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 67\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"xTOqk5OK9t64kko3nNmJoWu1Ohs=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Axios","render","wait","Guess","Draw","props","drawings","isDrawUp","setIsDrawUp","message","setMessage","isUserDraw","setIsUserDraw","canvasRef","contextRef","sent","setSent","isDrawing","setIsDrawing","drawList","setDrawList","paths","setPaths","choosedWord","setChoosenWord","prefix","setPrefix","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawer","urlpath","window","location","href","split","length","console","log","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","get","then","res","Object","values","data","drawPaintFromUser","getDrawings","x","pathLength","iterator","i","currentpath","r","beginPath","moveTo","lineTo","stroke","closePath","startDrawing","nativeEvent","offsetX","offsetY","finishDrawing","send","post","success","clear","reload","draw","push","guess","alert","e","target","value","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nimport {render} from \"react-dom\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\n\nimport Guess from '../guess/Guess'\nexport default function Draw(props){\n    let drawings = []\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    const [message, setMessage] = useState('')\n\n    const [isUserDraw,setIsUserDraw] = useState(false)\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [sent,setSent] = useState(false)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n    const[paths,setPaths] = useState(0)\n    const [choosedWord,setChoosenWord] = useState('')\n    const [prefix,setPrefix] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n\n    useEffect(() =>{\n\n        setIsUserDraw(props.isDrawer)\n        const urlpath = window.location.href.split((\"/\"))\n        // console.log(urlpath[urlpath.length-1])\n        if(urlpath[urlpath.length-1] === 'drawt') setIsUserDraw(true)\n        else setIsUserDraw(false)\n        console.log(urlpath[urlpath.length-1] === 'drawt')\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n\n        Axios.get(\"http://localhost:8000/getword\").then(res =>{\n            setChoosenWord(Object.values(res.data[0])[1])\n        })\n\n        if(!isUserDraw){\n            Axios.get(\"http://localhost:8000/getword\").then(res =>{\n                setCorrectWord(Object.values(res.data[0])[1])\n            })\n            drawPaintFromUser()\n        }\n\n    },[])\n    const getDrawings = () =>{\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            // console.log(x.data)\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n\n    }\n    const drawPaintFromUser = () => {\n        getDrawings();\n        var i = 0\n        var currentpath = 0\n        wait(1000).then(r => {\n                console.log(drawings.length)\n                contextRef.current.beginPath();\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                while(i < drawings.length) {\n\n                    while(currentpath === drawings[i][0]){\n                        console.log(drawings[i][0])\n                        contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                        contextRef.current.stroke();\n                    i++\n                }\n                contextRef.current.closePath()\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                contextRef.current.beginPath();\n                currentpath++;\n                }\n        })\n        setIsDrawUp(true)\n\n    }\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n    }\n\n     const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        setPaths(paths+1)\n        console.log(paths)\n        console.log(drawList)\n\n    }\n\n    const send = () =>{\n        setSent(true)\n        console.log('sending draw')\n        Axios.post(\"http://localhost:8000/draw\",{\n            drawings: drawList,\n            paths: paths\n        }).then((res) => {\n        });\n        setIsDrawUp(true)\n    }\n    const success = () =>{\n\n    }\n    const clear = () =>{\n        console.log('clearing draw')\n                // DROP columns in drawings table.\n                Axios.post('http://localhost:8000/deletepaths',\n                    {} // don't need to send data\n                ).then((res) =>{\n                    console.log('paths deleted')\n                })\n        window.location.reload();\n\n\n    }\n\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([paths,offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n    const guess = () =>{\n        if(correctWord === guessedWord){\n            console.log('clearing draw')\n            window.alert('Well done!')\n            // DROP columns in drawings table.\n            Axios.post('http://localhost:8000/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n            window.location.href = '/drawf'\n        }\n        else{\n            console.log('mistake')\n            setMessage('Oops, try again!')\n        }\n    }\n\n    return(\n        <div className={\"draw\"}>\n            <p className={\"draw\"}>Draw {prefix} {choosedWord}!</p>\n            <canvas className={\"canvas\"}\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}/>\n            <p/>\n            {isUserDraw ?\n                <div>\n                <button type=\"text\" onClick={send}>Send</button>\n                <button type=\"text\" onClick={clear}>Clear</button>\n                </div>\n                    : <p/>}\n\n            {!isUserDraw ?\n                <div className={\"guess\"}>\n                    Guess the word\n                    <p/>\n                    {/*<canvas className={\"canvas\"}*/}\n                    {/*        ref={canvasRef}/>*/}\n                    {/*<p/>*/}\n                    <p/>\n                    {/*<form onSubmit={guess}>*/}\n                    <label>Enter your guess</label>\n                    <p></p>\n                    <input className=\"guessedWord\" type={\"text\"}\n                           required\n                           minLength={1}\n                           maxLength={20}\n                           onChange={(e) => {\n                               setGuessedWord(e.target.value);\n                           }}\n                    />\n                    <p/>\n                    <button className=\"sub\" onClick={guess}>Submit</button>\n                    {/*</form>*/}\n                    {message.toString()!=='' ? <p>{message}</p> : <p/>}\n                    {/*create hints as a feature i.e. number of letters,...*/}\n                </div>\n                : <p/>}\n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}