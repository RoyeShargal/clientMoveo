{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Axios from \"axios\";\nimport './draw.css';\nimport { render } from \"react-dom\";\nimport Guess from '../guess/Guess';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Draw(props) {\n  _s();\n\n  const [isUserDraw, setIsUserDraw] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [sent, setSent] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [drawList, setDrawList] = useState([]);\n  const [paths, setPaths] = useState(0);\n  const [choosedWord, setChoosenWord] = useState('');\n  const [prefix, setPrefix] = useState('');\n  useEffect(() => {\n    setIsUserDraw(props.isDrawer);\n    if (window.location.href === 'drawf') setIsUserDraw(false);else setIsUserDraw(true);\n    console.log(isUserDraw);\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n    Axios.get(\"http://localhost:8000/getword\").then(res => {\n      setChoosenWord(Object.values(res.data[0])[1]);\n    });\n  }, []);\n\n  const startDrawing = _ref => {\n    let {\n      nativeEvent\n    } = _ref;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    setPaths(paths + 1);\n    console.log(paths);\n    console.log(drawList);\n  };\n\n  const send = () => {\n    setSent(true);\n    console.log('sending draw');\n    Axios.post(\"http://localhost:8000/draw\", {\n      drawings: drawList,\n      paths: paths\n    }).then(res => {});\n  };\n\n  const success = () => {};\n\n  const clear = () => {\n    console.log('clearing draw'); // DROP columns in drawings table.\n\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    });\n    window.location.reload();\n  };\n\n  const draw = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    drawList.push([paths, offsetX, offsetY]);\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"draw\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"draw\",\n      children: [\"Draw \", prefix, \" \", choosedWord, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      onMouseDown: startDrawing,\n      onMouseUp: finishDrawing,\n      onMouseMove: draw,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), sent == false ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: send,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: clear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), !isUserDraw ? /*#__PURE__*/_jsxDEV(Guess, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Draw, \"lQ2geMkBrpT5tuz/qZ1izVXVzrM=\");\n\n_c = Draw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Draw\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js"],"names":["React","useEffect","useRef","useState","Axios","render","Guess","Draw","props","isUserDraw","setIsUserDraw","canvasRef","contextRef","sent","setSent","isDrawing","setIsDrawing","drawList","setDrawList","paths","setPaths","choosedWord","setChoosenWord","prefix","setPrefix","isDrawer","window","location","href","console","log","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","get","then","res","Object","values","data","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","send","post","drawings","success","clear","reload","draw","push","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nimport {render} from \"react-dom\";\nimport Guess from '../guess/Guess'\nexport default function Draw(props){\n    const [isUserDraw,setIsUserDraw] = useState(false)\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [sent,setSent] = useState(false)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n    const[paths,setPaths] = useState(0)\n    const [choosedWord,setChoosenWord] = useState('')\n    const [prefix,setPrefix] = useState('')\n    useEffect(() =>{\n\n        setIsUserDraw(props.isDrawer)\n        if(window.location.href === 'drawf') setIsUserDraw(false)\n        else setIsUserDraw(true)\n        console.log(isUserDraw)\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n\n        Axios.get(\"http://localhost:8000/getword\").then(res =>{\n            setChoosenWord(Object.values(res.data[0])[1])\n\n        })\n\n    },[])\n\n\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n    }\n\n     const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        setPaths(paths+1)\n        console.log(paths)\n        console.log(drawList)\n\n    }\n\n    const send = () =>{\n        setSent(true)\n        console.log('sending draw')\n        Axios.post(\"http://localhost:8000/draw\",{\n            drawings: drawList,\n            paths: paths\n        }).then((res) => {\n        });\n\n    }\n    const success = () =>{\n\n    }\n    const clear = () =>{\n        console.log('clearing draw')\n                // DROP columns in drawings table.\n                Axios.post('http://localhost:8000/deletepaths',\n                    {} // don't need to send data\n                ).then((res) =>{\n                    console.log('paths deleted')\n                })\n        window.location.reload();\n\n\n    }\n\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([paths,offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n\n    return(\n        <div className={\"draw\"}>\n            <p className={\"draw\"}>Draw {prefix} {choosedWord}!</p>\n            <canvas className={\"canvas\"}\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}/>\n            <p/>\n            {sent == false ?             <button type=\"text\" onClick={send}>Send</button>\n            : <p/>}\n            <button type=\"text\" onClick={clear}>Clear</button>\n            {!isUserDraw ? <Guess/> : <p/>}\n\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}