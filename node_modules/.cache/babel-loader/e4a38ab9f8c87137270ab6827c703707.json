{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { goToGuess } from '../draw/Draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess() {\n  _s();\n\n  let drawings = [];\n  const [message, setMessage] = useState('');\n  const [correctWord, setCorrectWord] = useState('');\n  const [guessedWord, setGuessedWord] = useState('');\n  const [isDrawUp, setIsDrawUp] = useState(false);\n  useEffect(() => {\n    Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n    ).then(res => {\n      console.log('paths deleted');\n    }); // const canvas = canvasRef.current;\n    // canvas.width  = 800;\n    // canvas.height = 600;\n    // canvas.style.width  = '400px';\n    // canvas.style.height = '300px';\n    // const context = canvas.getContext(\"2d\")\n    // context.scale(2,2);\n    // context.lineCap = \"round\"\n    // context.strokeStyle=\"black\"\n    // context.lineWidth = 5;\n    // contextRef.current = context;\n    //\n  }, []); //create api call to get correctWord chosen by user drawing\n  // const guess = () =>{\n  //     if(correctWord === guessedWord){\n  //         console.log('clearing draw')\n  //         window.alert('Well done!')\n  //         // DROP columns in drawings table.\n  //         Axios.post('http://localhost:8000/deletepaths',\n  //             {} // don't need to send data\n  //         ).then((res) =>{\n  //             console.log('paths deleted')\n  //         })\n  //          window.location.href = '/drawf'\n  //     }\n  //     else{\n  //         console.log('mistake')\n  //         setMessage('Oops, try again!')\n  //     }\n  // }\n  // const getDrawings = () =>{\n  //     Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n  //         const pathLength = (x.data).length\n  //         // console.log(x.data)\n  //         for(let iterator=0; iterator<pathLength; iterator++){\n  //             drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n  //         }\n  //     })\n  //\n  // }\n  // const canvasRef = useRef(null)\n  // const contextRef = useRef(null)\n  // const draw = () => {\n  //     getDrawings();\n  //     var i = 0\n  //     var currentpath = 0\n  //     wait(1000).then(r => {\n  //             console.log(drawings.length)\n  //             contextRef.current.beginPath();\n  //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n  //             while(i < drawings.length) {\n  //\n  //                 while(currentpath === drawings[i][0]){\n  //                     console.log(drawings[i][0])\n  //                     contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n  //                     contextRef.current.stroke();\n  //                 i++\n  //             }\n  //             contextRef.current.closePath()\n  //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n  //             contextRef.current.beginPath();\n  //             currentpath++;\n  //             }\n  //     })\n  //     setIsDrawUp(true)\n  //\n  // }\n\n  return (\n    /*#__PURE__*/\n    // <div className={\"guess\"}>\n    //     Guess the word\n    // <p/>\n    //     {/*<canvas className={\"canvas\"}*/}\n    //     {/*        ref={canvasRef}/>*/}\n    //     {/*<p/>*/}\n    //     <p/>\n    //     {/*<form onSubmit={guess}>*/}\n    //         <label>Enter your guess</label>\n    //         <p></p>\n    //         <input className=\"guessedWord\" type={\"text\"}\n    //                required\n    //                minLength={1}\n    //                maxLength={20}\n    //                onChange={(e) => {\n    //                    setGuessedWord(e.target.value);\n    //                }}\n    //         />\n    //         <p/>\n    //         <button className=\"sub\" onClick={guess}>Submit</button>\n    //     {/*</form>*/}\n    //     {message.toString()!=='' ? <p>{message}</p> : <p/>}\n    //     {/*create hints as a feature i.e. number of letters,...*/}\n    // </div>\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(Guess, \"a36vAMRJEcbtLFNOXO538DvUvN4=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","goToGuess","Guess","drawings","message","setMessage","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawUp","setIsDrawUp","post","then","res","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,wCAAnB;AACA,SAAQC,SAAR,QAAwB,cAAxB;;AACA,eAAe,SAASC,KAAT,GAAgB;AAAA;;AAC3B,MAAIC,QAAQ,GAAG,EAAf;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,WAAD,EAAaC,cAAb,IAA+BT,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACU,WAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACAF,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,KAAK,CAACa,IAAN,CAAW,mCAAX,EACI,EADJ,CACO;AADP,MAEEC,IAFF,CAEQC,GAAD,IAAQ;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KAJD,EADU,CAMV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGH,GApBQ,EAoBP,EApBO,CAAT,CAN2B,CA2B3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAAA;AAAA;AAAA;AAAA;AAzBA;AA2BH;;GAhHuBd,K;;KAAAA,K","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\nimport {goToGuess} from '../draw/Draw'\nexport default function Guess(){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    useEffect(()=>{\n        Axios.post('http://localhost:8000/deletepaths',\n            {} // don't need to send data\n        ).then((res) =>{\n            console.log('paths deleted')\n        })\n        // const canvas = canvasRef.current;\n        // canvas.width  = 800;\n        // canvas.height = 600;\n        // canvas.style.width  = '400px';\n        // canvas.style.height = '300px';\n        // const context = canvas.getContext(\"2d\")\n        // context.scale(2,2);\n        // context.lineCap = \"round\"\n        // context.strokeStyle=\"black\"\n        // context.lineWidth = 5;\n        // contextRef.current = context;\n        //\n\n\n    },[])\n    //create api call to get correctWord chosen by user drawing\n    // const guess = () =>{\n    //     if(correctWord === guessedWord){\n    //         console.log('clearing draw')\n    //         window.alert('Well done!')\n    //         // DROP columns in drawings table.\n    //         Axios.post('http://localhost:8000/deletepaths',\n    //             {} // don't need to send data\n    //         ).then((res) =>{\n    //             console.log('paths deleted')\n    //         })\n    //          window.location.href = '/drawf'\n    //     }\n    //     else{\n    //         console.log('mistake')\n    //         setMessage('Oops, try again!')\n    //     }\n    // }\n    // const getDrawings = () =>{\n    //     Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n    //         const pathLength = (x.data).length\n    //         // console.log(x.data)\n    //         for(let iterator=0; iterator<pathLength; iterator++){\n    //             drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n    //         }\n    //     })\n    //\n    // }\n    // const canvasRef = useRef(null)\n    // const contextRef = useRef(null)\n\n\n    // const draw = () => {\n    //     getDrawings();\n    //     var i = 0\n    //     var currentpath = 0\n    //     wait(1000).then(r => {\n    //             console.log(drawings.length)\n    //             contextRef.current.beginPath();\n    //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n    //             while(i < drawings.length) {\n    //\n    //                 while(currentpath === drawings[i][0]){\n    //                     console.log(drawings[i][0])\n    //                     contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n    //                     contextRef.current.stroke();\n    //                 i++\n    //             }\n    //             contextRef.current.closePath()\n    //             contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n    //             contextRef.current.beginPath();\n    //             currentpath++;\n    //             }\n    //     })\n    //     setIsDrawUp(true)\n    //\n    // }\n\n    return(\n        // <div className={\"guess\"}>\n        //     Guess the word\n        // <p/>\n        //     {/*<canvas className={\"canvas\"}*/}\n        //     {/*        ref={canvasRef}/>*/}\n        //     {/*<p/>*/}\n        //     <p/>\n        //     {/*<form onSubmit={guess}>*/}\n        //         <label>Enter your guess</label>\n        //         <p></p>\n        //         <input className=\"guessedWord\" type={\"text\"}\n        //                required\n        //                minLength={1}\n        //                maxLength={20}\n        //                onChange={(e) => {\n        //                    setGuessedWord(e.target.value);\n        //                }}\n        //         />\n        //         <p/>\n        //         <button className=\"sub\" onClick={guess}>Submit</button>\n        //     {/*</form>*/}\n        //     {message.toString()!=='' ? <p>{message}</p> : <p/>}\n        //     {/*create hints as a feature i.e. number of letters,...*/}\n        // </div>\n    <div></div>\n    )\n}"]},"metadata":{},"sourceType":"module"}