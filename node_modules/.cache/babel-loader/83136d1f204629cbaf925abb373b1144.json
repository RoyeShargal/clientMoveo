{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess() {\n  _s();\n\n  let drawings = [];\n  let isActivate = false;\n\n  const getDrawings = () => {\n    isActivate = true;\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      const pathLength = x.data.length; // console.log(x.data)\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2], Object.values(x.data[iterator])[3]];\n      }\n    });\n    isActivate = false;\n  };\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const draw = () => {\n    getDrawings();\n    var currentpath = 0;\n    wait(1500).then(r => {\n      console.log('reached');\n\n      for (let i = 0; i < drawings.length; i++) {\n        if (typeof drawings[i][0] !== \"undefined\") {\n          while (currentpath === drawings[i][0]) {\n            console.log(drawings[i][0]);\n            contextRef.current.beginPath();\n            contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n            contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n            contextRef.current.stroke();\n            contextRef.current.closePath();\n            i++;\n          }\n        }\n\n        currentpath = currentpath + 1;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"GUESS\", /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: draw,\n      children: \" GET DRAWINGS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"4166hQdVhpFUUkALQs7rNszyGsI=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","Guess","drawings","isActivate","getDrawings","get","then","x","pathLength","data","length","iterator","Object","values","canvasRef","contextRef","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","draw","currentpath","r","console","log","i","beginPath","moveTo","lineTo","stroke","closePath"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,wCAAnB;;AACA,eAAe,SAASC,KAAT,GAAgB;AAAA;;AAC3B,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;;AACA,QAAMC,WAAW,GAAG,MAAK;AACrBD,IAAAA,UAAU,GAAE,IAAZ;AACAJ,IAAAA,KAAK,CAACM,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAiDC,CAAD,IAAK;AACjD,YAAMC,UAAU,GAAID,CAAC,CAACE,IAAH,CAASC,MAA5B,CADiD,CAEjD;;AACA,WAAI,IAAIC,QAAQ,GAAC,CAAjB,EAAoBA,QAAQ,GAACH,UAA7B,EAAyCG,QAAQ,EAAjD,EAAoD;AAChDT,QAAAA,QAAQ,CAACS,QAAD,CAAR,GAAqB,CAACC,MAAM,CAACC,MAAP,CAAcN,CAAC,CAACE,IAAF,CAAOE,QAAP,CAAd,EAAgC,CAAhC,CAAD,EAAoCC,MAAM,CAACC,MAAP,CAAcN,CAAC,CAACE,IAAF,CAAOE,QAAP,CAAd,EAAgC,CAAhC,CAApC,EAAuEC,MAAM,CAACC,MAAP,CAAcN,CAAC,CAACE,IAAF,CAAOE,QAAP,CAAd,EAAgC,CAAhC,CAAvE,CAArB;AACH;AACJ,KAND;AAOAR,IAAAA,UAAU,GAAC,KAAX;AAEH,GAXD;;AAYA,QAAMW,SAAS,GAAGjB,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMkB,UAAU,GAAGlB,MAAM,CAAC,IAAD,CAAzB;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMoB,MAAM,GAAGF,SAAS,CAACG,OAAzB,CADW,CAEX;AACA;AACA;AACA;;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAgB,GAAhB;AACAF,IAAAA,MAAM,CAACG,MAAP,GAAgB,GAAhB;AACAH,IAAAA,MAAM,CAACI,KAAP,CAAaF,KAAb,GAAsB,OAAtB;AACAF,IAAAA,MAAM,CAACI,KAAP,CAAaD,MAAb,GAAsB,OAAtB;AACA,UAAME,OAAO,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAgB,CAAhB;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,IAAAA,OAAO,CAACI,WAAR,GAAoB,OAApB;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAX,IAAAA,UAAU,CAACE,OAAX,GAAqBI,OAArB;AAEH,GAjBQ,EAiBP,EAjBO,CAAT;;AAmBA,QAAMM,IAAI,GAAG,MAAM;AACfvB,IAAAA,WAAW;AACX,QAAIwB,WAAW,GAAE,CAAjB;AACA5B,IAAAA,IAAI,CAAC,IAAD,CAAJ,CAAWM,IAAX,CAAgBuB,CAAC,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AAEI,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC9B,QAAQ,CAACQ,MAAvB,EAA8BsB,CAAC,EAA/B,EAAmC;AACnC,YAAG,OAAO9B,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAAP,KAA0B,WAA7B,EAAyC;AACzC,iBAAMJ,WAAW,KAAK1B,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAAtB,EAAsC;AAClCF,YAAAA,OAAO,CAACC,GAAR,CAAY7B,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAAZ;AACAjB,YAAAA,UAAU,CAACE,OAAX,CAAmBgB,SAAnB;AACAlB,YAAAA,UAAU,CAACE,OAAX,CAAmBiB,MAAnB,CAA0BhC,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAA1B,EAA0C9B,QAAQ,CAAC,CAAD,CAAR,CAAY,CAAZ,CAA1C;AACAa,YAAAA,UAAU,CAACE,OAAX,CAAmBkB,MAAnB,CAA0BjC,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAA1B,EAA0C9B,QAAQ,CAAC8B,CAAD,CAAR,CAAY,CAAZ,CAA1C;AACAjB,YAAAA,UAAU,CAACE,OAAX,CAAmBmB,MAAnB;AACArB,YAAAA,UAAU,CAACE,OAAX,CAAmBoB,SAAnB;AACAL,YAAAA,CAAC;AACJ;AAAC;;AACFJ,QAAAA,WAAW,GAAGA,WAAW,GAAC,CAA1B;AACC;AACR,KAhBD;AAmBC,GAtBL;;AAyBA,sBACI;AAAA,qCAEI;AAAQ,MAAA,SAAS,EAAE,QAAnB;AACQ,MAAA,GAAG,EAAEd;AADb;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,OAAO,EAAEa,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAtEuB1B,K;;KAAAA,K","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\nexport default function Guess(){\n    let drawings = []\n    let isActivate = false;\n    const getDrawings = () =>{\n        isActivate= true;\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            // console.log(x.data)\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n        isActivate=false;\n\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n    useEffect(() =>{\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n    },[])\n\n    const draw = () => {\n        getDrawings();\n        var currentpath =0\n        wait(1500).then(r => {\n            console.log('reached')\n\n                for(let i=0;i<drawings.length;i++) {\n                if(typeof drawings[i][0] !== \"undefined\"){\n                while(currentpath === drawings[i][0]) {\n                    console.log(drawings[i][0])\n                    contextRef.current.beginPath()\n                    contextRef.current.moveTo(drawings[i][1], drawings[1][2])\n                    contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                    contextRef.current.stroke();\n                    contextRef.current.closePath()\n                    i++\n                }}\n                currentpath = currentpath+1;\n                }\n        })\n\n\n        }\n\n\n    return(\n        <div>\n            GUESS\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <button type=\"text\" onClick={draw}> GET DRAWINGS</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}