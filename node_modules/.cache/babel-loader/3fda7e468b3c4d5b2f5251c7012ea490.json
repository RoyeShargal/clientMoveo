{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { wait } from \"@testing-library/user-event/dist/utils\";\nimport { goToGuess } from '../draw/Draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Guess extends React.Component {\n  render() {\n    let drawings = [];\n    const [message, setMessage] = useState('');\n    const [correctWord, setCorrectWord] = useState('');\n    const [guessedWord, setGuessedWord] = useState('');\n    const [isDrawUp, setIsDrawUp] = useState(false);\n    useEffect(() => {\n      // Axios.post('http://localhost:8000/deletepaths',\n      //     {} // don't need to send data\n      // ).then((res) =>{\n      //     console.log('paths deleted')\n      // })\n      const canvas = canvasRef.current;\n      canvas.width = 800;\n      canvas.height = 600;\n      canvas.style.width = '400px';\n      canvas.style.height = '300px';\n      const context = canvas.getContext(\"2d\");\n      context.scale(2, 2);\n      context.lineCap = \"round\";\n      context.strokeStyle = \"black\";\n      context.lineWidth = 5;\n      contextRef.current = context;\n      Axios.get(\"http://localhost:8000/getword\").then(res => {\n        setCorrectWord(Object.values(res.data[0])[1]);\n      });\n      draw();\n    }, []); //create api call to get correctWord chosen by user drawing\n\n    const guess = () => {\n      if (correctWord === guessedWord) {\n        console.log('clearing draw');\n        window.alert('Well done!'); // DROP columns in drawings table.\n\n        Axios.post('http://localhost:8000/deletepaths', {} // don't need to send data\n        ).then(res => {\n          console.log('paths deleted');\n        });\n        window.location.href = '/draw';\n      } else {\n        console.log('mistake');\n        setMessage('Oops, try again!');\n      }\n    };\n\n    const getDrawings = () => {\n      Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n        const pathLength = x.data.length;\n\n        for (let iterator = 0; iterator < pathLength; iterator++) {\n          drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2], Object.values(x.data[iterator])[3]];\n        }\n      });\n    };\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    const draw = () => {\n      getDrawings();\n      var i = 0;\n      var currentpath = 0;\n      wait(1000).then(r => {\n        console.log(drawings.length);\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n\n        while (i < drawings.length) {\n          while (currentpath === drawings[i][0]) {\n            console.log(drawings[i][0]);\n            contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n            contextRef.current.stroke();\n            i++;\n          }\n\n          contextRef.current.closePath();\n          contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n          contextRef.current.beginPath();\n          currentpath++;\n        }\n      });\n      setIsDrawUp(true);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess\",\n      children: [\"Guess the word\", /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"canvas\",\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter your guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"guessedWord\",\n        type: \"text\",\n        required: true,\n        minLength: 1,\n        maxLength: 20,\n        onChange: e => {\n          setGuessedWord(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sub\",\n        onClick: guess,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), message.toString() !== '' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 59\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","wait","goToGuess","Guess","Component","render","drawings","message","setMessage","correctWord","setCorrectWord","guessedWord","setGuessedWord","isDrawUp","setIsDrawUp","canvas","canvasRef","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","contextRef","get","then","res","Object","values","data","draw","guess","console","log","window","alert","post","location","href","getDrawings","x","pathLength","length","iterator","i","currentpath","r","beginPath","moveTo","lineTo","stroke","closePath","e","target","value","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\nimport {goToGuess} from '../draw/Draw'\nclass Guess extends React.Component{\n    render(){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    useEffect(()=>{\n        // Axios.post('http://localhost:8000/deletepaths',\n        //     {} // don't need to send data\n        // ).then((res) =>{\n        //     console.log('paths deleted')\n        // })\n        const canvas = canvasRef.current;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n        Axios.get(\"http://localhost:8000/getword\").then(res =>{\n            setCorrectWord(Object.values(res.data[0])[1])\n        })\n        draw()\n\n    },[])\n    //create api call to get correctWord chosen by user drawing\n    const guess = () =>{\n        if(correctWord === guessedWord){\n            console.log('clearing draw')\n            window.alert('Well done!')\n            // DROP columns in drawings table.\n            Axios.post('http://localhost:8000/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n             window.location.href = '/draw'\n        }\n        else{\n            console.log('mistake')\n            setMessage('Oops, try again!')\n        }\n    }\n    const getDrawings = () =>{\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n\n    const draw = () => {\n        getDrawings();\n        var i = 0\n        var currentpath = 0\n        wait(1000).then(r => {\n                console.log(drawings.length)\n                contextRef.current.beginPath();\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                while(i < drawings.length) {\n\n                    while(currentpath === drawings[i][0]){\n                        console.log(drawings[i][0])\n                        contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                        contextRef.current.stroke();\n                    i++\n                }\n                contextRef.current.closePath()\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                contextRef.current.beginPath();\n                currentpath++;\n                }\n        })\n        setIsDrawUp(true)\n\n    }\n\n    return(\n        <div className={\"guess\"}>\n            Guess the word\n        <p/>\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <p/>\n            <p/>\n                <label>Enter your guess</label>\n                <p></p>\n                <input className=\"guessedWord\" type={\"text\"}\n                       required\n                       minLength={1}\n                       maxLength={20}\n                       onChange={(e) => {\n                           setGuessedWord(e.target.value);\n                       }}\n                />\n                <p/>\n                <button className=\"sub\" onClick={guess}>Submit</button>\n            {/*</form>*/}\n            {message.toString()!=='' ? <p>{message}</p> : <p/>}\n            {/*create hints as a feature i.e. number of letters,...*/}\n        </div>\n    )\n}};"]},"metadata":{},"sourceType":"module"}