{"ast":null,"code":"var _jsxFileName = \"/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './guess.css';\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Guess() {\n  _s();\n\n  let drawings = [];\n  var isActivate = false;\n\n  const getDrawings = () => {\n    isActivate = true;\n    Axios.get(\"http://localhost:8000/getdraw\").then(x => {\n      const pathLength = x.data.length;\n\n      for (let iterator = 0; iterator < pathLength; iterator++) {\n        drawings[iterator] = [Object.values(x.data[iterator])[1], Object.values(x.data[iterator])[2]];\n      }\n\n      isActivate = false;\n      console.log(isActivate);\n    });\n  };\n\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current; // canvas.width = (window.innerWidth*2);\n    // canvas.height = (window.innerHeight*2);\n    // canvas.style.height = `${window.innerHeight}px`;\n    // canvas.style.width = `${window.innerWidth}px`;\n\n    canvas.width = 800;\n    canvas.height = 600;\n    canvas.style.width = '400px';\n    canvas.style.height = '300px';\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  }, []);\n\n  const draw = () => {\n    getDrawings();\n\n    function Wait() {\n      if (isActivate) {\n        setTimeout(function () {\n          Wait();\n        }, 100);\n      } else {\n        for (let i = 0; i < drawings.length; i++) {\n          contextRef.current.lineTo(drawings[i][0], drawings[i][1]);\n          console.log(drawings[i]);\n          contextRef.current.stroke();\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"GUESS\", /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: \"canvas\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"text\",\n      onClick: draw,\n      children: \" GET DRAWINGS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Guess, \"4166hQdVhpFUUkALQs7rNszyGsI=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/royeshargal/WebstormProjects/test/client/src/components/guess/Guess.js"],"names":["React","useEffect","useRef","useState","Axios","Guess","drawings","isActivate","getDrawings","get","then","x","pathLength","data","length","iterator","Object","values","console","log","canvasRef","contextRef","canvas","current","width","height","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","draw","Wait","setTimeout","i","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nexport default function Guess(){\n    let drawings = []\n    var isActivate=false;\n    const getDrawings =  () =>{\n        isActivate= true;\n        Axios.get(\"http://localhost:8000/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2]]\n            }\n            isActivate=false;\n\n            console.log(isActivate)\n        })\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n    useEffect(() =>{\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n    },[])\n\n    const draw = () => {\n        getDrawings();\n        function Wait(){\n            if(isActivate){\n                setTimeout(function (){Wait()},100);\n            }else{\n                for(let i=0;i<drawings.length;i++){\n                    contextRef.current.lineTo(drawings[i][0],drawings[i][1]);\n                    console.log(drawings[i])\n                    contextRef.current.stroke();\n                }\n            }\n        }\n    }\n\n    return(\n        <div>\n            GUESS\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            {/*<button type=\"text\" onClick={getDrawings}> GET DRAWINGS</button>*/}\n            <button type=\"text\" onClick={draw}> GET DRAWINGS</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}