[{"/Users/royeshargal/WebstormProjects/Moveo/client/src/index.js":"1","/Users/royeshargal/WebstormProjects/Moveo/client/src/App.js":"2","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/welcome/Welcome.js":"3","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/choose/Choose.js":"4","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js":"5","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js":"6","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/navbar/navbar.js":"7","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/scores/Scores.js":"8"},{"size":410,"mtime":1643125759516,"results":"9","hashOfConfig":"10"},{"size":1287,"mtime":1643553015473,"results":"11","hashOfConfig":"10"},{"size":1858,"mtime":1643579445970,"results":"12","hashOfConfig":"10"},{"size":1795,"mtime":1643578749873,"results":"13","hashOfConfig":"10"},{"size":6072,"mtime":1643579473055,"results":"14","hashOfConfig":"10"},{"size":4612,"mtime":1643579505280,"results":"15","hashOfConfig":"10"},{"size":447,"mtime":1643548967619,"results":"16","hashOfConfig":"10"},{"size":1300,"mtime":1643576364884,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m3whir",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/royeshargal/WebstormProjects/Moveo/client/src/index.js",[],"/Users/royeshargal/WebstormProjects/Moveo/client/src/App.js",["40","41","42","43","44","45"],"import React, { useState, useEffect, Component } from 'react';\nimport {Axios} from \"axios\";\nimport {render} from \"react-dom\";\nimport {\n    BrowserRouter as Router,\n    Routes,\n    Route, BrowserRouter\n} from \"react-router-dom\"\nimport Choose from \"./components/choose/Choose\"\nimport Welcome from \"./components/welcome/Welcome\";\nimport Draw from \"./components/draw/Draw\";\nimport Guess from \"./components/guess/Guess\";\nimport Navbar from \"./components/navbar/navbar\";\nimport Scores from \"./components/scores/Scores\";\n\nexport default function App() {\n\n        return (\n            <BrowserRouter >\n\n                <Navbar/>\n                    <Routes>\n                        <Route path='/' element={<Welcome/>} />\n                    </Routes>\n                    <Routes>\n                        <Route path='/choose' element={<Choose/>} />\n                    </Routes>\n                    <Routes>\n                        <Route path='/draw' element={<Draw/>}  />\n                    </Routes>\n\n                    <Routes>\n                        <Route path='/guess' element={<Guess/>}  />\n                    </Routes>\n                <Routes>\n                    <Route path='/scores' element={<Scores/>} />\n                </Routes>\n\n            </BrowserRouter>\n\n        );\n\n}\n\n","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/welcome/Welcome.js",["46"],"import React, {useState} from 'react'\nimport Axios from \"axios\";\nimport './welcome.css'\n\nexport default function Welcome(){\n    const [username, setUsername] = useState('')\n    // const [numPlayers, setNumPlayers] = useState(0)\n    const register = (event) => {\n        event.preventDefault()\n        Axios.post(\"https://moveoroye.herokuapp.com/welcome\",{\n            username: username,\n        }).then((res) => {\n            console.log(res);\n            window.alert(\"Welcome \"+username)\n\n            Axios.get(\"https://moveoroye.herokuapp.com/players\").then(x =>{\n                const numPlayers = ((x.data)[0])\n                if ((Object.values(numPlayers)[0]) %2 == 0){\n                    // init new game\n                    Axios.post(\"https://moveoroye.herokuapp.com/newgame\").then(x =>{\n                        console.log('game created')\n                    })\n                    window.location.replace('https://moveoroye.herokuapp.com/choose')\n                }\n                else{\n                    window.location.replace('https://moveoroye.herokuapp.com/guess')\n                }\n            })\n        });\n    }\n\n    return(\n            <div className={\"backg\"}>\n        <span className={\"text\"}>\n            Welcome mate!\n        </span>\n            <p/>\n\n        <form onSubmit={register}>\n            <label className={\"text\"}>Enter your name & press play</label>\n                <p></p>\n            <input className=\"textbox\" type={\"text\"}\n\n                   required\n                   minLength={1}\n                   maxLength={10}\n                   onChange={(e) => {\n                       setUsername(e.target.value);\n                   }}\n            />\n\n            <p/>\n            <button className=\"btn\" >Play!</button>\n\n            <div className=\"cen\">\n            </div>\n        </form>\n            </div>\n    )\n}","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/choose/Choose.js",["47","48","49","50"],"import React, {useState} from 'react'\nimport './choose.css'\nimport Axios from \"axios\";\n\nexport default function Choose(){\n    const randomWords = require('random-words');\n    const [name,setName] = useState('');\n    const [points,setPoints] = useState(0)\n    let sampleWords = randomWords(300);\n    sampleWords.sort(function(a,b){\n        return a.length - b.length;\n    })\n    const words = [sampleWords[20],sampleWords[200],sampleWords[sampleWords.length-1]]\n\n    const chosenWord = (name,points) => {\n        Axios.post(\"https://moveoroye.herokuapp.com/choose\", {\n            name: name,\n            points:points\n        }).then((res) => {\n            console.log(res)\n            window.alert('You choose the word '+name+'!');\n            window.location.href= \"/draw\";\n            })\n    }\n    return(\n        <div className=\"backg\">\n            <p className={\"text\"}>\n                So, we are about to play!\n            </p>\n            <p className={\"text\"}>\n                Please choose one of the following words:\n            </p>\n            <table className=\"wordsView\">\n                <thead>\n                <tr>\n                    <td className=\"words\" onClick={(e) => {\n                        chosenWord(words[0],1)\n                    }}>\n                        {words[0]}\n                    </td>\n                    <td className=\"words\" onClick={() => {\n                        chosenWord(words[1],3)\n                    }}>\n                        {words[1]}\n                    </td>\n                    <td className=\"words\" onClick={() => {\n                        chosenWord(words[2],5)\n                    }}>\n                        {words[2]}\n                    </td>\n                </tr>\n                </thead>\n            </table>\n        </div>\n    )\n}","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/guess/Guess.js",["51","52"],"import React, {useEffect, useRef, useState} from 'react'\nimport './guess.css'\nimport Axios from \"axios\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\n\n\nexport default function Guess(props){\n    let drawings = []\n    const [message, setMessage] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    const [points,setPoints] = useState(0);\n    Axios.defaults.withCredentials = true;\n    const [currPoints,setCurrPoints] = useState(0)\n\n    useEffect(()=>{\n\n        Axios.post('https://moveoroye.herokuapp.com/deletepaths',\n            {} // don't need to send data\n        ).then((res) =>{\n            console.log('paths deleted')\n        })\n        const canvas = canvasRef.current;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n        getPoints()\n\n        const interval = setInterval(() => {\n            if(!isDrawUp) draw()\n            Axios.get(\"https://moveoroye.herokuapp.com/getword\").then(res => {\n                setCorrectWord(Object.values(res.data[0])[1])\n                setPoints(Object.values(res.data[0])[2])\n            })\n\n        }, 1000)\n\n    },[])\n\n    const getPoints = () =>{\n        Axios.get(\"https://moveoroye.herokuapp.com/getallpoints\").then((response)=>{\n                // console.log('hello' + response.data.points)\n                // setCurrPoints(response.data.points)\n            setCurrPoints(parseInt(Object.values(response.data[0])))\n            }\n        )\n    }\n\n    //create api call to get correctWord chosen by user drawing\n    const guess = () =>{\n            if(correctWord === guessedWord){\n                Axios.post('https://moveoroye.herokuapp.com/setpoints', {points:points}).then(()=>{\n                    console.log('reached guess to change points')\n\n                })\n                endGameDeletePathsDeleteWords()\n            }\n            else{\n                console.log('False! the correct word is: '+correctWord+' with '+ points+' points')\n                setMessage('Oops, try again!')\n            }\n    }\n    const endGameDeletePathsDeleteWords = () =>{\n\n        Axios.post(\"https://moveoroye.herokuapp.com/deleteallwords\").then(()=>{\n            console.log('deleted words')\n        })\n        Axios.post(\"https://moveoroye.herokuapp.com/endgame\",\n            {done:1, points:points}).then(()=>{\n            console.log('clearing draw')\n            window.alert('Well done!')\n            window.location.replace('https://moveoroye.herokuapp.com/choose')\n            // DROP columns in drawings table.\n            Axios.post('https://moveoroye.herokuapp.com/deletepaths',\n                {} // don't need to send data\n            ).then((res) =>{\n                console.log('paths deleted')\n            })\n        })\n    }\n    const getDrawings = () =>{\n        Axios.get(\"https://moveoroye.herokuapp.com/getdraw\").then((x)=>{\n            const pathLength = (x.data).length\n            for(let iterator=0; iterator<pathLength; iterator++){\n                drawings[iterator] = [Object.values(x.data[iterator])[1],Object.values(x.data[iterator])[2],Object.values(x.data[iterator])[3]]\n            }\n        })\n\n    }\n    const endGame = () =>{\n        console.log('ending game')\n\n        Axios.post(\"https://moveoroye.herokuapp.com/newscore\",{score:currPoints}).then((x) =>{\n            console.log(x.data)\n\n        }).then(()=>{\n            setCurrPoints(0)\n            Axios.post(\"https://moveoroye.herokuapp.com/deletegames\").then(()=>{\n                console.log('deleted games')\n            })\n            endGameDeletePathsDeleteWords()\n\n            window.location.replace('https://moveoroye.herokuapp.com/scores')\n        })\n    }\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n\n\n    const draw = () => {\n        getDrawings();\n        var i = 0\n        var currentpath = 0\n        wait(1000).then(r => {\n                // console.log(drawings.length)\n                contextRef.current.beginPath();\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                while(i < drawings.length) {\n\n                    while(currentpath === drawings[i][0]){\n                        //console.log(drawings[i][0])\n                        contextRef.current.lineTo(drawings[i][1], drawings[i][2]);\n                        contextRef.current.stroke();\n                    i++\n                }\n                contextRef.current.closePath()\n                contextRef.current.moveTo(drawings[i][1], drawings[1][2]);\n                contextRef.current.beginPath();\n                currentpath++;\n                }\n        })\n        setIsDrawUp(true)\n    }\n\n\n    return(\n        <div className={\"guess\"}>\n            {!isNaN(currPoints) ?            <p>Current game points {currPoints}</p>\n: <p/>            }\n\n            <p/>\n            <canvas className={\"canvas\"}\n                    ref={canvasRef}/>\n            <p/>\n            <p>The word worth {points} Points!</p>\n                <label>Enter your guess</label>\n                <p></p>\n                <input className=\"guessedWord\" type={\"text\"}\n                       required\n                       minLength={1}\n                       maxLength={20}\n                       onChange={(e) => {\n                           setGuessedWord(e.target.value);\n                       }}\n                />\n                <p/>\n                <button className=\"btn\" onClick={guess}>Submit</button>\n            {/*</form>*/}\n            {message.toString()!=='' ? <p>{message}</p> : <p/>}\n            {/*create hints as a feature i.e. number of letters,...*/}\n            <button className={\"btn\"} onClick={endGame}>End Game</button>\n\n        </div>\n    )\n}","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/draw/Draw.js",["53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69"],"import React, {useEffect, useRef, useState} from 'react'\nimport Axios from \"axios\";\nimport './draw.css'\nimport {render} from \"react-dom\";\nimport {wait} from \"@testing-library/user-event/dist/utils\";\n\nimport Guess from '../guess/Guess'\nexport default function Draw(props){\n    let drawings = []\n    const [isDrawUp, setIsDrawUp] = useState(false)\n    const [message, setMessage] = useState('')\n\n    const canvasRef = useRef(null)\n    const contextRef = useRef(null)\n    const [sent,setSent] = useState(false)\n    const [isDrawing,setIsDrawing] = useState(false)\n    const [drawList, setDrawList] = useState([])\n    const[paths,setPaths] = useState(0)\n    const [choosedWord,setChoosenWord] = useState('')\n    const [prefix,setPrefix] = useState('')\n    const [correctWord,setCorrectWord] = useState('')\n    const [guessedWord,setGuessedWord] = useState('')\n    const [game,setGame] = useState(0)\n\n    useEffect(() =>{\n\n        const canvas = canvasRef.current;\n        // canvas.width = (window.innerWidth*2);\n        // canvas.height = (window.innerHeight*2);\n        // canvas.style.height = `${window.innerHeight}px`;\n        // canvas.style.width = `${window.innerWidth}px`;\n        canvas.width  = 800;\n        canvas.height = 600;\n        canvas.style.width  = '400px';\n        canvas.style.height = '300px';\n        const context = canvas.getContext(\"2d\")\n        context.scale(2,2);\n        context.lineCap = \"round\"\n        context.strokeStyle=\"black\"\n        context.lineWidth = 5;\n        contextRef.current = context;\n\n        Axios.get(\"https://moveoroye.herokuapp.com/getword\").then(res =>{\n            setChoosenWord(Object.values(res.data[0])[1])\n        })\n\n        const interval = setInterval(() => {\n            {\n                Axios.get(\"https://moveoroye.herokuapp.com/getgame\").then(res =>{\n                    setGame(Object.values(res.data[0])[2])\n                    console.log('status is='+Object.values(res.data[0])[2])\n                    if (Object.values(res.data[0])[2]===1){\n                        //game finished\n                        //reset game to undone, i.e. 0\n                        Axios.post(\"https://moveoroye.herokuapp.com/endgame\",\n                            {done:0}).then(()=>{\n                            Axios.post(\"https://moveoroye.herokuapp.com/newgame\").then(x =>{\n                                console.log('game created')\n                                clear()\n                                window.location.replace('https://moveoroye.herokuapp.com/guess')\n                            })\n\n                        })\n                    }\n                })\n            }\n\n        }, 1000)\n\n\n\n\n\n    },[])\n\n    const startDrawing = ({nativeEvent}) => {\n        const{offsetX,offsetY} = nativeEvent;\n        contextRef.current.beginPath()\n        contextRef.current.moveTo(offsetX,offsetY)\n        setIsDrawing(true)\n    }\n\n     const finishDrawing = () => {\n        contextRef.current.closePath()\n        setIsDrawing(false)\n        setPaths(paths+1)\n        console.log(paths)\n        console.log(drawList)\n    }\n\n    const send = () =>{\n        setSent(true)\n        console.log('sending draw')\n        Axios.post(\"https://moveoroye.herokuapp.com/draw\",{\n            drawings: drawList,\n            paths: paths\n        }).then((res) => {\n        });\n\n    }\n\n    const clear = () =>{\n        console.log('clearing draw')\n                // DROP columns in drawings table.\n                Axios.post('https://moveoroye.herokuapp.com/deletepaths',\n                    {} // don't need to send data\n                ).then((res) =>{\n                    console.log('paths deleted')\n                })\n        window.location.replace('https://moveoroye.herokuapp.com/draw')\n\n\n    }\n\n    const draw = ({nativeEvent}) => {\n        if(!isDrawing){\n            return\n        }\n        const {offsetX,offsetY} = nativeEvent;\n        drawList.push([paths,offsetX,offsetY]);\n        contextRef.current.lineTo(offsetX,offsetY);\n        contextRef.current.stroke();\n    }\n\n    return(\n        <div className={\"draw\"}>\n            <p className={\"draw\"}>Draw {prefix} {choosedWord}!</p>\n            <canvas className={\"canvas\"}\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}/>\n            <p/>\n                <div >\n                    {!sent ? <button className={\"btn\"} type=\"text\" onClick={send}>Send</button>\n                    :<p/>}\n                <button type=\"text\"  className={\"btn\"} onClick={clear}>Clear</button>\n                </div>\n\n        </div>\n    )\n}\n","/Users/royeshargal/WebstormProjects/Moveo/client/src/components/navbar/navbar.js",[],"/Users/royeshargal/WebstormProjects/Moveo/client/src/components/scores/Scores.js",["70","71","72","73"],"import React, {useEffect, useState} from \"react\";\nimport './scores.css'\nimport Axios from \"axios\";\nimport {render} from \"react-dom\";\nexport default function Scores(){\n    const [scoresArr,setScoresArr] = useState([])\n    const [refresh,setRefresh] = useState(0)\n    useEffect(()=> {\n        if(scoresArr.length===0) {\n            viewScores()\n        }\n\n    },[])\n    const viewScores = () =>{\n            Axios.get('/getallscores').then(r => {\n                const scores = Object.values(r.data)\n                scores.forEach((x) => {\n                    scoresArr.push(x)\n                })\n                setRefresh(1)\n                console.log(scoresArr)\n\n            })\n\n    }\n\n        return (\n            <div>\n                <div className={\"backg\"}>\n                    <p className=\"title\">Best Scores</p>\n\n                    {\n                        scoresArr.map((item) => (\n                                <div key={item.idscore}>\n                                    Game Number: {item.idscore}  Points: {item.points}\n                                    <p/>\n                                </div>\n                            )\n                        )\n                    }\n                    {/*{scoresArr.toString()}*/}\n                </div>\n            </div>\n        )\n\n}",{"ruleId":"74","severity":1,"message":"75","line":1,"column":17,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"78","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":36},{"ruleId":"74","severity":1,"message":"79","line":1,"column":38,"nodeType":"76","messageId":"77","endLine":1,"endColumn":47},{"ruleId":"74","severity":1,"message":"80","line":2,"column":9,"nodeType":"76","messageId":"77","endLine":2,"endColumn":14},{"ruleId":"74","severity":1,"message":"81","line":3,"column":9,"nodeType":"76","messageId":"77","endLine":3,"endColumn":15},{"ruleId":"74","severity":1,"message":"82","line":5,"column":22,"nodeType":"76","messageId":"77","endLine":5,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":18,"column":55,"nodeType":"85","messageId":"86","endLine":18,"endColumn":57},{"ruleId":"74","severity":1,"message":"87","line":7,"column":12,"nodeType":"76","messageId":"77","endLine":7,"endColumn":16},{"ruleId":"74","severity":1,"message":"88","line":7,"column":17,"nodeType":"76","messageId":"77","endLine":7,"endColumn":24},{"ruleId":"74","severity":1,"message":"89","line":8,"column":12,"nodeType":"76","messageId":"77","endLine":8,"endColumn":18},{"ruleId":"74","severity":1,"message":"90","line":8,"column":19,"nodeType":"76","messageId":"77","endLine":8,"endColumn":28},{"ruleId":"74","severity":1,"message":"91","line":38,"column":15,"nodeType":"76","messageId":"77","endLine":38,"endColumn":23},{"ruleId":"92","severity":1,"message":"93","line":47,"column":7,"nodeType":"94","endLine":47,"endColumn":9,"suggestions":"95"},{"ruleId":"74","severity":1,"message":"81","line":4,"column":9,"nodeType":"76","messageId":"77","endLine":4,"endColumn":15},{"ruleId":"74","severity":1,"message":"96","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":13},{"ruleId":"74","severity":1,"message":"97","line":7,"column":8,"nodeType":"76","messageId":"77","endLine":7,"endColumn":13},{"ruleId":"74","severity":1,"message":"98","line":9,"column":9,"nodeType":"76","messageId":"77","endLine":9,"endColumn":17},{"ruleId":"74","severity":1,"message":"99","line":10,"column":12,"nodeType":"76","messageId":"77","endLine":10,"endColumn":20},{"ruleId":"74","severity":1,"message":"100","line":10,"column":22,"nodeType":"76","messageId":"77","endLine":10,"endColumn":33},{"ruleId":"74","severity":1,"message":"101","line":11,"column":12,"nodeType":"76","messageId":"77","endLine":11,"endColumn":19},{"ruleId":"74","severity":1,"message":"102","line":11,"column":21,"nodeType":"76","messageId":"77","endLine":11,"endColumn":31},{"ruleId":"74","severity":1,"message":"103","line":17,"column":22,"nodeType":"76","messageId":"77","endLine":17,"endColumn":33},{"ruleId":"74","severity":1,"message":"104","line":20,"column":19,"nodeType":"76","messageId":"77","endLine":20,"endColumn":28},{"ruleId":"74","severity":1,"message":"105","line":21,"column":12,"nodeType":"76","messageId":"77","endLine":21,"endColumn":23},{"ruleId":"74","severity":1,"message":"106","line":21,"column":24,"nodeType":"76","messageId":"77","endLine":21,"endColumn":38},{"ruleId":"74","severity":1,"message":"107","line":22,"column":12,"nodeType":"76","messageId":"77","endLine":22,"endColumn":23},{"ruleId":"74","severity":1,"message":"108","line":22,"column":24,"nodeType":"76","messageId":"77","endLine":22,"endColumn":38},{"ruleId":"74","severity":1,"message":"109","line":23,"column":12,"nodeType":"76","messageId":"77","endLine":23,"endColumn":16},{"ruleId":"74","severity":1,"message":"91","line":47,"column":15,"nodeType":"76","messageId":"77","endLine":47,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":48,"column":13,"nodeType":"112","messageId":"113","endLine":66,"endColumn":14},{"ruleId":"74","severity":1,"message":"81","line":4,"column":9,"nodeType":"76","messageId":"77","endLine":4,"endColumn":15},{"ruleId":"74","severity":1,"message":"114","line":6,"column":22,"nodeType":"76","messageId":"77","endLine":6,"endColumn":34},{"ruleId":"74","severity":1,"message":"115","line":7,"column":12,"nodeType":"76","messageId":"77","endLine":7,"endColumn":19},{"ruleId":"92","severity":1,"message":"116","line":13,"column":7,"nodeType":"94","endLine":13,"endColumn":9,"suggestions":"117"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Component' is defined but never used.","'Axios' is defined but never used.","'render' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'points' is assigned a value but never used.","'setPoints' is assigned a value but never used.","'interval' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'draw' and 'isDrawUp'. Either include them or remove the dependency array.","ArrayExpression",["118"],"'wait' is defined but never used.","'Guess' is defined but never used.","'drawings' is assigned a value but never used.","'isDrawUp' is assigned a value but never used.","'setIsDrawUp' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'setDrawList' is assigned a value but never used.","'setPrefix' is assigned a value but never used.","'correctWord' is assigned a value but never used.","'setCorrectWord' is assigned a value but never used.","'guessedWord' is assigned a value but never used.","'setGuessedWord' is assigned a value but never used.","'game' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setScoresArr' is assigned a value but never used.","'refresh' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'scoresArr.length' and 'viewScores'. Either include them or remove the dependency array.",["119"],{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [draw, isDrawUp]",{"range":"124","text":"125"},"Update the dependencies array to be: [scoresArr.length, viewScores]",{"range":"126","text":"127"},[1511,1513],"[draw, isDrawUp]",[360,362],"[scoresArr.length, viewScores]"]